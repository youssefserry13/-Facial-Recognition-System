# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E3btmmipvQPMJuatS5flV-iO3cNWENT0
"""

!pip install streamlit deepface opencv-python-headless joblib tf-keras pyngrok

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import numpy as np
# import cv2
# from tensorflow.keras.models import load_model
# import joblib
# from deepface import DeepFace
# 
# # ===============================
# # 1. Load Model + Encoder
# # ===============================
# MODEL_PATH = "best_model_improved_v1.h5"   # make sure this file is uploaded
# ENCODER_PATH = "label_encoder.pkl"         # make sure this file is uploaded
# 
# model = load_model(MODEL_PATH)
# label_encoder = joblib.load(ENCODER_PATH)
# 
# # ===============================
# # 2. Streamlit App
# # ===============================
# st.title("üë§ Face Recognition App")
# st.write("Upload a face image and the model will predict the identity.")
# 
# uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])
# 
# if uploaded_file is not None:
#     # Convert uploaded file to numpy image
#     file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
#     img = cv2.imdecode(file_bytes, 1)
# 
#     try:
#         # ‚úÖ Generate embeddings with Facenet512
#         embedding = DeepFace.represent(
#             img_path=img,
#             model_name="Facenet512",
#             enforce_detection=False
#         )[0]["embedding"]
#         embedding = np.array(embedding).reshape(1, -1)  # Shape (1,512)
# 
#         # Prediction
#         pred = model.predict(embedding, verbose=0)
#         pred_class = np.argmax(pred, axis=1)[0]
#         pred_name = label_encoder.classes_[pred_class]
# 
#         # Display results
#         st.image(cv2.cvtColor(img, cv2.COLOR_BGR2RGB),
#                  caption=f"Prediction: {pred_name}",
#                  use_column_width=True)
#         st.success(f"‚úÖ Predicted Identity: {pred_name}")
# 
#     except Exception as e:
#         st.error(f"‚ö†Ô∏è Face embedding failed: {str(e)}")
#         st.image(cv2.cvtColor(img, cv2.COLOR_BGR2RGB),
#                  caption="Uploaded Image",
#                  use_column_width=True)
#

from pyngrok import ngrok

# Start Streamlit with ngrok
!streamlit run app.py &

# Create ngrok tunnel
public_url = ngrok.connect(8501)
print("üëâ Public URL:", public_url)

from pyngrok import ngrok

# Kill old tunnels (important if you re-run)
ngrok.kill()

# Create new public tunnel for Streamlit
public_url = ngrok.connect(8501)
print("üëâ Public URL:", public_url)